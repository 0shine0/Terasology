// This include file is meant for each Java project/module and contains setup for artifact repos, code analysis, etc

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'project-report'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'

sourceCompatibility = 1.8
targetCompatibility = 1.8

// We use both Maven Central and our own Artifactory instance, which contains module builds, extra libs, and so on
repositories {
    mavenCentral()
    maven {
        if (rootProject.hasProperty("alternativeResolutionRepo")) {
            // If the user supplies an alternative repo via gradle.properties then use that
            url alternativeResolutionRepo
        } else {
            // Our default is the main virtual repo containing everything except repos for testing Artifactory itself
            url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
        }
    }
}

configurations {
    codeMetrics
}

dependencies {
    codeMetrics(group: 'org.terasology.config', name: 'codemetrics', version: '1.0.0', ext: 'zip')

    checkstyle ('com.puppycrawl.tools:checkstyle:6.5')
    pmd ('net.sourceforge.pmd:pmd-core:5.3.0')
    pmd ('net.sourceforge.pmd:pmd-java:5.3.0')
    // the FindBugs version is set in the configuration
}

task sourceJar(type: Jar) {
    description = "Create a JAR with all sources"
    from sourceSets.main.allSource
    from sourceSets.test.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = "Create a JAR with the JavaDoc for the java sources"
    from javadoc.destinationDir
    classifier = 'javadoc'
}

// Extra details provided for unit tests
test {
    // ignoreFailures: Specifies whether the build should break when the verifications performed by this task fail.
    ignoreFailures = true

    // showStandardStreams: makes the standard streams (err and out) visible at console when running tests
    testLogging.showStandardStreams = true

    // Arguments to include while running tests
    jvmArgs '-Xms512m', '-Xmx1024m', '-XX:MaxPermSize=128m'

    // Make sure the natives have been extracted, but only for multi-workspace setups (not for solo module builds)
    if (project.name != project(':').name) {
        dependsOn rootProject.extractNatives
    }
}

checkstyle {
    ignoreFailures = true
    config = resources.text.fromArchiveEntry(configurations.codeMetrics, "checkstyle/checkstyle.xml")
    // this assigns the property variable ${samedir} in checkstyle.xml
    configProperties.samedir = config.asFile().parent
}

configure([checkstyleMain, checkstyleTest]) { 
    doFirst {
        def suppressions = resources.text.fromArchiveEntry(configurations.codeMetrics, "checkstyle/suppressions.xml")
        // the asFile() method extracts the file from the zip archive and puts it next to checkstyle.xml
        // this procedure should not be done in the config phase, since the clean task would erase the file before it can be used
        suppressions.asFile()
    }
}

pmd {
    ignoreFailures = true
    ruleSetConfig = resources.text.fromArchiveEntry(configurations.codeMetrics, "pmd/pmd.xml")
    // by default, gradle uses both ruleset file AND the rulesets. 
    // We override the ruleSets to use only those from the file 
    ruleSets = []
}

findbugs {
    ignoreFailures = true
    toolVersion = '3.0.1'
    excludeFilterConfig = resources.text.fromArchiveEntry(configurations.codeMetrics, "findbugs/findbugs-exclude.xml")
}

// TODO: Temporary until javadoc has been fixed for Java 8 everywhere
javadoc {
    failOnError = false
}
