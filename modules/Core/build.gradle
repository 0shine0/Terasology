// Simple build file for modules - the one under the Core module is the template, will be copied as needed to modules

// Git plugin details at https://github.com/ajoberstar/gradle-git
import org.ajoberstar.gradle.git.tasks.*

// Grab all the common stuff like plugins to use, artifact repositories, code analysis config
apply from: "$rootDir/config/gradle/common.gradle"

// For modules apply the separate dependencies file that is unique per repo (and supposed to be empty for Core)
apply from: 'dependencies.gradle'

// New stuff for publishing to Artifactory hopefully including dependency info :-)
apply plugin: 'maven-publish'
apply plugin: 'artifactory-publish'

import groovy.json.JsonSlurper

ext {
    // Read environment variables, including variables passed by jenkins continuous integration server
    env = System.getenv()
}

// TODO: Move this Gitty stuff off to the common.gradle under config as well?
// The special build script section here ties dependencies to running the Gradle script itself
buildscript {

    // This needs to be in here as well for some reason - can't just inherit?
    repositories {
        mavenCentral()
        maven {
            url 'http://repo.jfrog.org/artifactory/libs-snapshots/'
        }
    }

    // Dependencies at build script level
    dependencies {
        // Git plugin for Gradle
        classpath 'org.ajoberstar:gradle-git:0.6.3'

        // Artifactory magic - tricky to get this working right, this did the trick locally ...
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-client', version: '+')
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '+')
    }
}


def moduleDepends = [];
def moduleFile = file('module.txt')

// Really the module file should always exist if the module was correctly created or cloned using Gradle
if (!moduleFile.exists()) {
    println "Y U NO EXIST MODULE.TXT!"
    throw new GradleException("Failed to find module.txt for " + project.name)
// Otherwise, retrieve dependencies information from it
} else {
    //println "Scanning for dependencies in module.txt for " + project.name
    def slurper = new JsonSlurper()
    def moduleConfig = slurper.parseText(moduleFile.text)
    for (dependency in moduleConfig.dependencies) {
        if (dependency.id != 'engine') {
            moduleDepends += dependency.id
        }
    }

    // Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)
    version = moduleConfig.version

    // Jenkins-Artifactory integration catches on to this as part of the Maven-type descriptor
    group = 'org.nanoware.modules'

    // Check to see if we're running in Jenkins and in that case attach a snapshot+job build number
    if (env.BUILD_NUMBER != null) {
        version += '-SNAPSHOT+' + env.BUILD_NUMBER
    }
}

// Set dependencies. Note that the dependency information from module.txt is used for other Terasology modules
dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.10'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.0'
    testCompile group: 'org.jboss.shrinkwrap', name: 'shrinkwrap-depchain-java7', version: '1.1.3'

    // For reading logback.groovy when running unit tests. Excessive just for a config file?
    testRuntime group: 'org.codehaus.groovy', name: 'groovy', version: '2.1.7'

    println "Dependencies for " + project.name + " will be engine and potentially more on any following lines:"
    moduleDepends.each {
        println " + module dependency " + it
    }

    // Check to see if this module is not the root Gradle project - if so we are in a multi-project workspace
    if (project.name != project(':').name) {
        // Dependency on the engine itself (actually its built jar file)
        compile project(':engine')

        // Unit tests for the engine have been split out into their own sub-project (eases some config)
        testCompile project(':engine-tests')

        // If the module has dependencies on other modules we look in a few different spots to find them
        if (moduleDepends.size() > 0) {
            println "We're in a local multi-project workspace so will look for dependencies there first, then Artifactory"
        }

        for (dependency in moduleDepends) {

            File wouldBeSrcPath = new File(rootDir, 'modules/' + dependency)

            // TODO: module jars with version info (maybe supplied by user) won't match. Artifactory fetches get renamed
            File wouldBeModuleJar = new File(rootDir, 'modules/' + dependency + '.jar')

            //println "Scanning for source module at: " + wouldBeSrcPath.getAbsolutePath()
            //println "Or local module jar: " + wouldBeModuleJar.getAbsoluteFile()

            // First see if we have an actual source module project in the Gradle project tree (user addModule'ed it)
            if (wouldBeSrcPath.exists()) {
                //TODO: This is fragile, of course, and will hit problems with corrupt module directories (empty dir)

                println "Found " + wouldBeSrcPath.getAbsolutePath() + ", setting a direct project dependency"
                compile project(':modules:' + dependency)

            } else if (wouldBeModuleJar.exists()) {

                // Alternatively might find the dependency in the modules dir as a binary (manually placed or fetched)
                println "Found " + wouldBeModuleJar.getAbsoluteFile() + ", it will be included via file dependency"

                compile files(wouldBeModuleJar)

                // Knowing that the jar is in /modules we know it'll be available at runtime
                // If the user later adds a source version it'll override this binary naturally

            } else {
                println "*** Unsatisfied local dependency for module " + project.name + ": " + dependency
                // The '+' is satisfied by any version. "changing" triggers better checking for updated snapshots
                // TODO: When version handling and promotion is in then we can probably ignore snapshots in normal cases
                compile(group: 'org.nanoware.modules', name: dependency, version: '+', changing: true)

                // NOTE: Referencing resolvedArtifacts actually resolves the involved artifacts at this time (early)
                configurations.compile.resolvedConfiguration.resolvedArtifacts.each { ResolvedArtifact artifact ->
                    def id = artifact.moduleVersion.id
                    if (id.group == 'org.nanoware.modules') {
                        println "Remotely resolved $id.group - $id.name at version $id.version"

                        // This copies the jar from the Gradle cache to the game's module dir for runtime usage
                        wouldBeModuleJar.createNewFile()
                        wouldBeModuleJar << artifact.file.bytes
                        // After this has run the next execution will match the local binary case instead

                        // TODO: Make the project clean task delete such transient module jars? They'll re-resolve
                    }
                }
            }
        }
    } else {
        println "We're in a single-project workspace (probably Jenkins) so will look elsewhere for everything"

        // In Jenkins we can expect to have a sort of "project harness" dumped into a libs dir (engine, engine libs ..)
        compile fileTree(dir: 'libs', include: '*.jar', exclude: 'engine.tests-*.jar')
        testCompile fileTree(dir: 'libs', include: 'engine.tests-*.jar')

        /* Should be possible to exclude this now in favor of a module's dependencies.gradle
        // To get Terasology module dependencies we simply declare them against Artifactory and wait - no runtime need
        moduleDepends.each {
            println "*** Attempting to fetch dependency module from Artifactory: " + project.name + ": " + it
            // The '+' is satisfied by any version
            compile(group: 'org.nanoware.modules', name: it, version: '+')
        }
        */
    }
}

// Generate the module directory structure if missing
task createSkeleton() {
    mkdir('assets')
    mkdir('assets/animations')
    mkdir('assets/atlas')
    mkdir('assets/behaviors')
    mkdir('assets/blocks')
    mkdir('assets/blockTiles')
    mkdir('assets/fonts')
    mkdir('assets/materials')
    mkdir('assets/mesh')
    mkdir('assets/music')
    mkdir('assets/prefabs')
    mkdir('assets/shaders')
    mkdir('assets/shapes')
    mkdir('assets/skeletalMesh')
    mkdir('assets/skins')
    mkdir('assets/sounds')
    mkdir('assets/textures')
    mkdir('assets/ui')
    mkdir('src/main/java')
    mkdir('src/test/java')
}

// This task syncs everything in the assets dir into the output dir, used when jarring the module
task syncAssets(type: Sync) {
    from 'assets'
    into 'build/classes/assets'
}

// Change the output dir of each module
sourceSets {
    main {
        java {
            output.classesDir 'build/classes'
        }
    }
}

// Instructions for packaging a jar file - is a manifest even needed for modules?
jar {
    // Make sure the assets directory is included
    dependsOn syncAssets

    // Jarring needs to copy module.txt and all the assets into the output
    doFirst {
        copy {
            from 'module.txt'
            into 'build/classes'
        }
    }
}

// For Artifactory
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

// Prep an IntelliJ module for the Terasology module - yes, might want to read that twice :D
idea {
    module {
        // Change around the output a bit
        inheritOutputDirs = false
        outputDir = file('build/classes')
        testOutputDir = file('build/testClasses')
    }
}

// For Eclipse just make sure the classpath is right
eclipse {
    classpath {
        defaultOutputDir = file('build/classes')
    }
}

// Utility task to update the module (except Core) via Git - not tested with local changes present, may cause trouble
task (updateModule, type: GitPull)  {
    description = 'Updates source for the module from its home (most likely GitHub)'

    // Base whether the task executes on two things
    // 1 - we actually asked for it ("gradlew updateModule") - otherwise we don't want it to run
    // 2 - this is not the Core module, which lives with the engine and needs no updates
    boolean enabled = "updateModule" in project.gradle.startParameter.taskNames && !project.name.equals("Core")
    // TODO: Used to cheat with declaring tasks using << but that defers everything (including config) to execution phase
    // Some tasks do not work that way, this one would ALWAYS go with default (root git repo) in that case
    // Probably should go through other stuff and use this strategy instead of <<

    // Only if we asked for it (and not Core) do we actually configure the repo path and log that we're updating
    if (enabled) {

        // This is the Git repo we're actually using - projectDir is specific to the executing project, a.k.a. module whatever
        // If not enabled the default is the root project's Git dir, which is a valid Git dir
        // However in the case of Core we'd be setting ain invalid Git dir which causes fail - so this avoids that
        repoPath = projectDir

        println "Pulling updates via Git to " + getRepoDir() + ", if dependencies change run Gradle again (like 'gradlew idea')"
    }
}
