/*
 * This is a Gradle build file:
 * - Gradle Homepage: http://gradle.org/
 * - Gradle Installation: http://gradle.org/installation
 * - View tasks for this project: $ gradle tasks
 */

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'

idea {
  project {
    jdkName = '1.6'
	languageLevel = '1.6'
  }
  module { 
    inheritOutputDirs = false
	outputDir = file('target/classes/main')
    testOutputDir = file('target/classes/test')
	testSourceDirs += file('src/perfTest/java')
	excludeDirs += file('protobuf')
	excludeDirs += file('blender_addons')
	excludeDirs += file('gradle')
	excludeDirs += file('rawAssets')
	excludeDirs += file('logs')
	excludeDirs += file('SAVED_WORLDS')
  }
}

sourceCompatibility = 1.6
//version = '0.5.0' //TODO: Disabled version tagging until we actually have something solid to do with it (was breaking old artifact links)
buildDir = 'target'

task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-8a'
}

// Compiles everything as groovy, due to java<->groovy interdependencies
sourceSets {
	main {
		java { srcDirs = [] }
		groovy { srcDirs = ['src/main/java','src/main/groovy'] }
		resources { srcDir = 'src/main/resources' }
	}
	perfTest
}

test {
  //Uncomment to makes the standard streams (err and out) visible at console when running tests
  //testLogging.showStandardStreams = true
  jvmArgs '-Xms512m', '-Xmx1024m', '-XX:MaxPermSize=128m'
}

task perfTests(type: Test) {
	testClassesDir = sourceSets.perfTest.output.classesDir
	classpath = sourceSets.perfTest.runtimeClasspath
	jvmArgs '-Xms512m', '-Xmx1024m', '-XX:MaxPermSize=128m'
}

repositories {
	mavenCentral()
}

dependencies{
	groovy group: 'org.codehaus.groovy', name: 'groovy', version: '1.8.2'
    compile group: 'com.google.guava', name: 'guava', version: '11.0.1'
	compile group: 'com.google.code.gson', name: 'gson', version: '2.1'
	compile fileTree(dir: 'libs', include: '*.jar')	
	testCompile 'junit:junit:4.10'
	testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.0'
	perfTestCompile sourceSets.main.output
	perfTestCompile configurations.testCompile
    perfTestCompile sourceSets.test.output
    perfTestRuntime configurations.testRuntime
}

jar {
	dependsOn compileGroovy
	from { 
		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	}
	manifest {
		attributes("Main-Class": "org.terasology.game.Terasology", "Manifest-Version": "1.0")
	}
	archiveName('Terasology.jar')
}

jar.doLast {
	ant.signjar(jar: jar.archivePath, keystore: 'applet/tera.keystore', alias: 'Terasology', storepass: 'Terasology')
}

task dist(type:Copy) {
	description = 'Creates a fully-functional game folder.'
	dependsOn jar
	
	from('.') {
		include 'natives/**'
		include 'groovy/**'
		include 'README.markdown'
		include 'LICENSE.txt'
	}
	from('launchScripts') {
		exclude('Launcher.xml')
	}
	from(jar.archivePath)
	into('target/dist')
}

task zip(type:Zip) {
	description = 'Creates a fully-functionional game archive.'
	dependsOn dist
	from('target/dist')
	into('Terasology')
	destinationDir = buildDir
}

task applet(type:Copy) {
	description = 'Creates a game distribution playable through a browser.'
	dependsOn jar

    from('applet') {
		exclude '*.keystore'		
	}
    from(jar.archivePath)
    into('target/applet')
}

task run(type:JavaExec) {
	description = 'Run Terasology'
	dependsOn jar
	main = 'org.terasology.game.Terasology'
	classpath jar.archivePath
}
